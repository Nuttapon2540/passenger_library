<h1>Troubleshooting Passenger</h1>
<%= render_partial('/shared/current_selection') %>

<p class="lead">This page provides guidance on what to do when you encounter problems.</p>

**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

## First things to try

### 1 Check the Passenger log file

One of the first things you should do upon encountering a problem, is to check [the Passenger log file](<%= url_for "/advanced_guides/troubleshooting/nginx/log_file.html" %>). The log file is where Passenger prints to when it encounters a problem or when it wants to tell you something.

This log file contains:

 * Passenger info, warning and error messages.
 * Everything that the application writes to STDOUT and STDERR. This typically consists of errors that the application encounters during startup, but not errors that it encounters when it's handling requests.

<% if integration_mode_type == :nginx %>
  <p>
    The Passenger log file is the <strong>global</strong> Nginx error log file. This is one specified by the <code>error_log</code> directive in the main context (that is, <strong>not</strong> the one inside the <code>http</code> context). The file is typically located in <code>/var/log/nginx/error.log</code>.
  </p>
  <p>
    Or, if you configured the <a href="<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_log_file">passenger_log_file</a> directive, then the log file is in the referenced file.
  </p>
<% elsif integration_mode_type == :apache %>
  <p>
    The Passenger log file is the <strong>global</strong> (not the per-vhost) Apache error log file. This is typically located in <code>/var/log/apache2/error_log</code>.
  </p>
  <p>
    You can find out the exact location of the error log by running <code>passenger-config --detect-apache2</code>.
  </p>
  <p>
    Or, if you configured the <a href="<%= url_for "/references/config_reference/apache/index.html" %>#passengerlogfile">PassengerLogFile</a> directive, then the log file is in the referenced file.
  </p>
<% else %>
  <p>
    The default log file is located in <code>log/passenger.XXX.log</code>, where <code>XXX</code> is the port number that Passenger listens on.
  </p>
  <p>
    Or, if you passed the <a href="<%= url_for "/references/config_reference/standalone/index.html" %>#--log-file-log_file"><code>--log-file</code> / "log_file"</a> configuration, then the log file is in the referenced file.
  </p>
<% end %>

<div class="note">
  Not finding anything useful in the Passenger error log? Please read <a href="<%= url_for "/advanced_guides/troubleshooting/nginx/log_file.html" %>#troubleshooting-logging-problems">Troubleshooting logging problems.</a>
</div>

### 2 Check the application log file

The application or web framework may have its own log file that is independent from the Passenger log file. You should also check that file to see whether your application or web framework has logged any important messages.

<% if language_type == :ruby %>
For example, Ruby on Rails logs to `log/development.log` and `log/production.log`. When an error occurs during request handling, it is typically logged here. Note that this file does **not** contain errors that Rails encounters during startup -- those kinds of errors are typically written to STDERR, which means they end up in the Passenger log instead.
<% end %>

<% if integration_mode_type == :nginx || integration_mode_type == :apache %>
Note that Passenger runs applications in the "production" environment by default (that is, Passenger sets `RAILS_ENV`, `RACK_ENV`, `NODE_ENV` and related environment variables "production"). So if you're using Rails, please be sure to check `production.log` instead of `development.log`.
<% end %>

### 3 Upgrade Passenger to the latest version

Some problems are caused by bugs in Passenger. Passenger is under active maintenance and development, so there is a chance that -- assuming you really ran into a bug -- the bug is already fixed. Please [upgrade Passenger to the latest version](<%= url_for "/advanced_guides/install_and_upgrade/standalone/upgrade.html" %>) and check whether the problem is still there.

If you suspect that your problem is a bug in Passenger, and upgrading didn't fix it, please [report the bug to our Github issue tracker](https://github.com/phusion/passenger).

If upgrading Passenger didn't help, and you don't think your problem is caused by a bug, then please continue with this troubleshooting guide.

### 4 Consult the in-depth topics

Passenger takes care of a lot of things for you under the hood. If you don't know what Passenger does, then problems may seem opaque. Try [learning more about the activities that Passenger perform](<%= url_for "/advanced_guides/in_depth/ruby/index.html" %>); it may help you with understanding the problem and with troubleshooting.

### 5 Out of ideas? Try the support resources

If you are stuck with a problem, please do not hesitate to contact one of the support resources. Passenger has a friendly community of users who look out for each other. We -- Passenger's authors -- are also ready to help you whenever we can.

[Stack Overflow](https://stackoverflow.com/questions/ask?tags=passenger)
: Post a question on Stack Overflow if you are experiencing problems. Support on Stack Overflow is provided by the community, and our own developers also watch Stack Overflow on a regular basis. But support here is provided on a best-effort basis, so sometimes a bit of patience will help. Be sure to use the "passenger" tag.

[Github issue tracker](https://github.com/phusion/passenger/issues)
: If you are experiencing a problem that you believe is a bug, please report it here.

[Security vulnerabilities email address](mailto:security@phusion.nl)
: Please report security vulnerabilities to [security@phusion.nl](mailto:security@phusion.nl). We will do our best to respond to you as quickly as we can, so please do not disclose the vulnerability until then.

[Priority support for Enterprise customers](https://www.phusionpassenger.com/customers/help_support)
: If you are a [Passenger Enterprise](https://www.phusionpassenger.com/features#premium-features) customer, then you are eligible for basic priority support. Please submit your support ticket via [the interface in the customer area](https://www.phusionpassenger.com/customers/help_support).

  For most customers, this basic priority support has a response time of 3 working days, with a maximum of 1 support incident per month. Please consult your contract for the exact support level that you are eligible for.

[Premium support contracts](https://www.phusionpassenger.com/commercial_support)
: We also provide premium support contracts for those who desire higher support levels, for example 24x7 phone support with a response time of 1 hour.


## Common problems

<% if integration_mode_type != :standalone %>
### Why does the first request take a long time?

#### Symptoms

The first request to your application takes more time than usual. Subsequent requests have the normal speed.

#### Cause

Passenger starts your application the first time it is accessed, not during web server startup. Some applications can take several seconds to start. If you're using Ruby on Rails, then needing 10 seconds to start your application is normal. On slow or heavily loaded servers, or in case of large and heavy applications, the startup time may be even longer.

#### Solution

<% if integration_mode_type == :nginx %>
  Use the [passenger_pre_start](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_pre_start) configuration option.
<% else %>
  [PassengerPreStart (Apache)](<%= url_for "/references/config_reference/nginx/index.html" %>#passengerprestart)
<% end %>
<% end %>

### I get "command not found" when running a Passenger command through sudo

#### Symptoms

Passenger commands can be found as a normal user, but not when run through sudo:

<div>
  <pre class="highlight"><span class="prompt">$ </span>passenger-status
<span class="output">...some output, but no "command not found" error...</span>
<span class="prompt">$ </span>passenger-install-apache2-module
<span class="output">...some output, but no "command not found" error...</span>
<span class="prompt">$ </span>sudo passenger-status
<span class="output">sudo: passenger-status: command not found</span>
<span class="prompt">$ </span>sudo passenger-install-apache2-module
<span class="output">sudo: passenger-install-apache2-module: command not found</span></pre>
</div>

#### Cause

The operating system looks up commands using [the PATH environment variable](<%= url_for "/advanced_guides/in_depth/ruby/environment_variables.html#the-path-environment-variable" %>). However, sudo resets all environment variables to a default value, dictated by sudo. If Passenger was installed to a location that is not in the default sudo PATH value, then sudo will not be able to find the Passenger commands.

In addition, if you installed Passenger using a Ruby interpreter that was installed through RVM, then you **must** use [rvmsudo](https://rvm.io/integration/sudo) instead of sudo. As a rule, when you're an RVM user, always use rvmsudo instead of sudo.

#### Solution

Execute the command using its full path. You can use `which` as a normal user to lookup the full path:

<div>
  <pre class="highlight"><span class="prompt">$ </span>which passenger-status
<span class="output">/somewhere/bin/passenger-status</span></pre>

<p>Next, run full path of the command using either sudo or rvmsudo:</p>

<pre class="highlight"><span class="prompt">$ </span>sudo /somewhere/bin/passenger-status

<span class="c"># -OR, if you're using RVM:-</span>

<span class="prompt">$ </span>rvmsudo /somewhere/bin/passenger-status</pre>
</div>

#### Recommended reading

When using sudo, you will probably run into similar "command not found" issues in the future, with components other than Passenger. We **strongly recommend** you to [learn about environment variables](<%= url_for "/advanced_guides/in_depth/ruby/environment_variables.html" %>) so that you know what to do in the future.

<% if integration_mode_type == :nginx %>
### Upon accessing the web app, Nginx reports a "404 Not Found" error instead of displaying my web app

#### Symptoms

You visit your web app, but instead of seeing your web app, you see a 404 Not Found error page. In addition, you also see a piece of text that the 404 Not Found error page is generated by Nginx.

If you look in the Nginx error log, you see an error message like this:

~~~
2015/07/02 20:14:17 [error] 31746#0: *80 "/app/public/index.html" is not found (2: No such file or directory), client: 127.0.0.1, server: 127.0.0.1, request: "GET / HTTP/1.1", host: "foo.com"
~~~

There are several common causes for this problem.

#### Cause and solution #1

You did not enable Passenger in the corresponding `server` block with [passenger_enabled on](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_enabled).

To solve this problem, please specify `passenger_enabled on` in your Nginx configuration file, inside your app's `server` block.

#### Cause and solution #2

If you did enable Passenger with `passenger_enabled on`, then maybe the problem is that you did not configure Nginx to enable the Passenger module. Please check whether your Nginx configuration file contains the [passenger_root](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_root) option. If it doesn't, [please add it](<%= url_for "/references/config_reference/nginx/index.html" %>#how-to-fix-passenger_root).

#### Cause and solution #3

If you did enable Passenger with `passenger_enabled on`, and `passenger_root` is also specified in your Nginx config file, then it is likely that Passenger encountered an error during initialization. If Passenger was not able to initialize, then it will log the error, and then Nginx will behave as if Passenger was never installed in the first place. As a result, Nginx will try to serve static files in your web app's static files directory, fail to do so, then report a 404 Not Found error.

To solve this problem, please open the [Passenger log file](<%= url_for "/advanced_guides/troubleshooting/nginx/log_file.html" %>) and look for any error messages there. The error messages will tell you why Passenger failed to initialize. Please take action accordingly.

#### Cause and solution #4

Make sure Passenger recognizes your application. If [autodetection](<%= url_for "/advanced_guides/in_depth/ruby/app_autodetection/index.html" %>) fails, for example because you are using non-standard filenames, you might have to specify additional options.

<% if language_type == :ruby %>
Note that if you are upgrading from a Passenger version below 5, autodetection requires a `config.ru` to be present, as specified in the [upgrade notes](<%= url_for "/advanced_guides/install_and_upgrade/standalone/migrating_from_p4_to_p5.html" %>).
<% end %>

### Upon accessing the web app, Nginx reports a "Permission denied" error

#### Symptoms

A typical error message looks like this:

~~~
2013/10/21 17:16:03 [alert] 98687#0: *1 Cannot stat
'/Users/phusion/Sites/rack.test/config.ru': Permission denied (errno=13); This
error means that the Nginx worker process (PID 99064, running as UID 70) does
not have permission to access this file. Please read this page to learn how to
fix this problem:
https://www.phusionpassenger.com/library/admin/nginx/troubleshooting/?a=upon-accessing-the-web-app-nginx-reports-a-permission-denied-error;
Extra info, client: 127.0.0.1, server: www.foo.com, request: "GET / HTTP/1.1",
host: "www.foo.com"
~~~

#### Cause

Passenger tries to access your application directory in order to find out what language it's written in. This access is initiated from inside an Nginx worker process. This error indicates that the Nginx worker process does not have the proper permissions to access your application's root directory.

#### Solution

You need to relax permissions to that the Nginx worker process can access your application directory, by making the directory group- and world-*executable*:

~~~bash
sudo chmod g+x,o+x /Users/phusion/Sites/rack.test
~~~

You *also* need to ensure that all parent directories are also 'executable' by the Nginx process:

~~~bash
sudo chmod g+x,o+x /Users/phusion/Sites
sudo chmod g+x,o+x /Users/phusion
sudo chmod g+x,o+x /Users
~~~

<div class="note">
  <strong>Why 'executable' permission and not 'readable'?</strong>
  <p>
    On Unix, the 'executable' permission on directories dictates whether a process is allowed to <em>access</em> files or subdirectories within that directory. The 'readable' permission dictates whether a process is allowed to see what files are inside the directory, but does not necessarily allow access to them. You can learn more at <a href="http://en.wikipedia.org/wiki/File_system_permissions#Permissions">Wikipedia</a>.
  </p>
</div>

<% elsif integration_mode_type == :apache %>
### macOS: The installer cannot locate MAMP's Apache

#### Symptoms

The installer finds Apache 2 development headers at `/Applications/MAMP/Library/bin/apxs`. However, Apache cannot be found. The installer also outputs the following error:

~~~
cannot open /Applications/MAMP/Library/build/config_vars.mk:
No such file or directory at /Applications/MAMP/Library/bin/apxs line 218.
~~~

#### Cause

Your MAMP installation seems to be broken. In particular, 'config_vars.mk' is missing.

#### Solution

Please read [this forum topic](http://forum.mamp.info/viewtopic.php?t=1866) to learn how to fix this problem. See also [this bug report](https://github.com/phusion/passenger/issues/113).

### Apache reports a "403 Forbidden" error

Please refer to [Static assets such as images and stylesheets aren't being displayed](#static-assets-such-as-images-and-stylesheets-arent-being-displayed).

### Static assets such as images and stylesheets aren't being displayed

Static assets are accelerated, i.e. they are served directly by Apache and do not go through the application. There are two reasons why Apache doesn't serve static assets correctly:

 1. Your Apache configuration is too strict, and does not allow HTTP clients to access static assets. This can be achieved with an `Allow from all` directive in the correct place. For example:

    ~~~
    <Directory "/webapps/mycook/public">
       Options FollowSymLinks
       AllowOverride None
       Order allow,deny
       Allow from all
       Options -MultiViews
       # Uncomment this if you're on Apache &ge; 2.4:
       #Require all granted
    </Directory>
    ~~~

    See also [this discussion](http://groups.google.com/group/phusion-passenger/browse_thread/thread/9699a639a87f85f4/b9d71a03bf2670a5).

 2. The Apache process doesn't have permission to access your application's directory. Please make sure that the application's directory, as well as all of its parent directories, have the correct permissions and/or ownerships.

### Apache cannot access my app's files because of SELinux errors

On Enterprise Linux (Red Hat, CentOS, Rocky, Alma), Apache is locked down by a security mechanism called SELinux. This security mechanism works on top of normal Unix permissions. In order for Apache to be able to access your app's files, you must set the proper SELinux labels on your files.

First, ensure that your app does not live in a home directory. It is not possible to allow Apache to read files from your home directory.

Second, give your app's files the `httpd_sys_content_t` labels by running the following command:

~~~bash
sudo chcon -R -h -t httpd_sys_content_t /path-to-your-app
~~~

### The application thinks its not on SSL even though it is

Rails and many other frameworks infers whether it's running on SSL through the CGI environment variable `HTTPS`. Apache always sets this variable when on SSL, except when SSL is incorrectly configured.

Most Apache installations already configure SSL by default on port 443 (conf/extra/httpd-ssl.conf). Some people think they can save some typing in subsequent SSL vhost blocks, and omit important options like 'SSLEngine on', like this:

~~~
# httpd-ssl.conf contains something like:
# <VirtualHost _default_:443>
#     SSLEngine on
#     ...
# </VirtualHost>
Include conf/extra/httpd-ssl.conf

<VirtualHost *:443>
    ServerName www.example.com
    DocumentRoot /webapps/example/public
</Virtualhost>
~~~

**This is wrong!** In each SSL vhost block you must re-specify all the SSL options. Otherwise Apache won't properly detect the vhost as an SSL vhost block. Here's the corrected example:

~~~
Include conf/extra/httpd-ssl.conf

<VirtualHost *:443>
    ServerName www.example.com
    DocumentRoot /webapps/example/public
    SSLEngine on
    ...more SSL options here...
</Virtualhost>
~~~

### Conflicting Apache modules

Some Apache modules are not compatible with Passenger. They may be loaded simultaneously with Passenger, but they may not be enabled simultaneously in the same virtual hosts.

#### mod_userdir

`mod_userdir` is not compatible with Passenger at the moment.

#### MultiViews (mod_negotiation)

MultiViews is not compatible with Passenger. You must disable MultiViews for all Passenger hosts.

#### VirtualDocumentRoot

VirtualDocumentRoot is not compatible with Passenger at the moment.

<% else %>
### Upon uploading a file, Passenger reports "client_body_temp/00000000xx failed (2: No such file or directory)"

#### Symptoms

When performing an HTTP POST call, the request sometimes fails, with Passenger reporting an error along the lines of:

~~~
/tmp/passenger-standalone.8583/client_body_temp/0000000022" failed (2: No such
file or directory), client: 127.0.0.1, server: www.foo.com
~~~

#### Cause

Passenger buffers HTTP POST bodies (file uploads) to a temporary directory, by default `/tmp/passenger-standalone.xxx`. This error means that Passenger that that directory has been removed, probably by some other program.

#### Solution

Tell Passenger to use a different directory to store its temporary files by setting the `TMPDIR` environment variable. For example:

~~~bash
mkdir $HOME/tmp
cd /path-to-your-app
export TMPDIR=$HOME/tmp
passenger start
~~~

<% end %>

<% if language_type == :ruby %>
## Common problems specific to Ruby

### The application reports during startup that it cannot find a gem

#### Symptoms

Despite the fact that you have already run `bundle install`, you see an error page that contains the following messages:

~~~
It looks like Bundler could not find a gem. Maybe you didn't install all the gems that this application needs. To install your gems, please run:

  bundle install

...

Could not find XXX in any of the sources (Bundler::GemNotFound)
~~~

#### Causes and solutions

The most common cause of this problem, is that your system has multiple Ruby interpreter (or multiple RVM gemsets), and your application is not being run under the correct Ruby interpreter. The `bundle install` command installs gems into a directory that is specific to one Ruby interpreter, so when your app is being run under a different Ruby interpreter, Bundler cannot find its gems.

To solve this problem, you must explicitly tell Passenger what Ruby interpreter to use.
<% if integration_mode_type == :nginx -%>
  You can do this with the [passenger_ruby](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_ruby) configuration option.
<% elsif integration_mode_type == :apache -%>
  You can do this with the [PassengerRuby](<%= url_for "/references/config_reference/apache/index.html" %>#passengerruby) configuration option.
<% else -%>
  You can do this with the [`--ruby` / "ruby"](<%= url_for "/references/config_reference/standalone/index.html" %>#--ruby-ruby).
<% end -%>

The second most common cause of this problem, is that your application is being run under the wrong user. The `bundle install` command often installs gems into a user-specific directory. So if Passenger for some reason runs your app as a different user than the one that invoked `bundle install`, Bundler may not be able to find its gems.
<% if integration_mode_type == :nginx || integration_mode_type == :apache -%>
Read [Sandboxing apps with Unix user accounts](<%= url_for "/advanced_guides/deployment_and_scaling/standalone/user_sandboxing.html" %>) to learn why Passenger may run your application as a different user.
<% end -%>

To solve this problem, you must explicit tell Passenger what user to run as
<% if integration_mode_type == :nginx -%>
  by using the [passenger_user](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_user) configuration option.
<% elsif integration_mode_type == :apache -%>
  by using the [PassengerUser](<%= url_for "/references/config_reference/apache/index.html" %>#passengeruser) configuration option.
<% else -%>
  by using the [`--user` / "user"](<%= url_for "/references/config_reference/standalone/index.html" %>#--user-user) option.
<% end %>

If this didn't solve your problem, try following the tips in the error message. Also be sure to double check the settings printed on the error page. Be sure to double check all environment variables, user IDs, etc and check whether they are what you expect.


## Common problems specific to Ruby on Rails
This section lists some common problems that are specific to the Ruby on Rails web framework.

### The "About your application's environment" link does not work

The "About your application's environment" link only works if the application is started in the "development" environment.  Passenger starts the application in the "production" environment by default.

Use the
<% if integration_mode_type == :nginx %>
[rails_env](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_app_env) configuration option
<% end %>
<% if integration_mode_type == :apache %>
[RailsEnv](<%= url_for "/references/config_reference/apache/index.html" %>#passenger_app_env) configuration option
<% end %>
<% if integration_mode_type == :standalone %>
[`--environment` / "environment"](<%= url_for "/references/config_reference/standalone/index.html" %>#--environment-environment) option
<% end %>
to change this.

### The Rails application reports that it's unable to start because of a permission error

Please check whether your Rails application's directory has the correct permissions. By default, Rails applications are started as the owner of the file `config.ru`, except if the file is owned by root. If the file is owned by root, then the Rails application will be started as 'nobody'
<% if integration_mode_type == :nginx -%>
(or as the user specified by [passenger_default_user](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_default_user)).

Please read [User account sandboxing](<%= url_for "/advanced_guides/deployment_and_scaling/standalone/user_sandboxing.html" %>) for details.
<% end -%>
<% if integration_mode_type == :apache -%>
(or as the user specified by [PassengerDefaultUser](<%= url_for "/references/config_reference/apache/index.html" %>#passengerdefaultuser)).

Please read [User account sandboxing](<%= url_for "/advanced_guides/deployment_and_scaling/standalone/user_sandboxing.html" %>) for details.
<% end -%>
<% if integration_mode_type == :standalone -%>
(or as the user specified by the [`--user` / "user"](<%= url_for "/references/config_reference/standalone/index.html" %>#--user-user) option).
<% end -%>

### The Rails application cannot find my database

If your Rails application cannot find your database, then you probably didn't configure Passenger correctly, or didn't configure your database.yml correctly. By default, Passenger runs Rails applications in 'production' mode, so please either make sure that your database.yml contains an entry for the production environment, or configure Passenger to start your app in the 'development' environment.

<% elsif language_type == :nodejs %>
## Common problems specific to Node.js

### I get "Error: http.Server.listen() was called more than once"

Please refer to [Reverse port binding in Node.js](<%= url_for "/advanced_guides/in_depth/ruby/nodejs/reverse_port_binding.html" %>).

<% end %>

<div class="back-button">
  <a class="dark-button" href="<%= url_for "/advanced_guides/troubleshooting/index.html" %>">Back</a>
</div>
